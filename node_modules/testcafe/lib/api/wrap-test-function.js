"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const test_controller_1 = __importDefault(require("./test-controller"));
const test_run_tracker_1 = __importDefault(require("./test-run-tracker"));
const error_list_1 = __importDefault(require("../errors/error-list"));
const test_run_1 = require("../errors/test-run");
function wrapTestFunction(fn) {
    return async (testRun) => {
        let result = null;
        const errList = new error_list_1.default();
        const markeredfn = test_run_tracker_1.default.addTrackingMarkerToFunction(testRun.id, fn);
        testRun.controller = new test_controller_1.default(testRun);
        testRun.observedCallsites.clear();
        test_run_tracker_1.default.ensureEnabled();
        try {
            result = await markeredfn(testRun.controller);
        }
        catch (err) {
            errList.addError(err);
        }
        if (!errList.hasUncaughtErrorsInTestCode) {
            for (const callsite of testRun.observedCallsites.callsitesWithoutAwait) {
                errList.addError(new test_run_1.MissingAwaitError(callsite));
                testRun.observedCallsites.callsitesWithoutAwait.delete(callsite);
            }
        }
        if (errList.hasErrors)
            throw errList;
        return result;
    };
}
exports.default = wrapTestFunction;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcC10ZXN0LWZ1bmN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwaS93cmFwLXRlc3QtZnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBK0M7QUFDL0MsMEVBQWdEO0FBRWhELHNFQUFxRDtBQUNyRCxpREFBdUQ7QUFFdkQsU0FBd0IsZ0JBQWdCLENBQUUsRUFBWTtJQUNsRCxPQUFPLEtBQUssRUFBRSxPQUFnQixFQUFFLEVBQUU7UUFDOUIsSUFBSSxNQUFNLEdBQVMsSUFBSSxDQUFDO1FBQ3hCLE1BQU0sT0FBTyxHQUFNLElBQUksb0JBQWlCLEVBQUUsQ0FBQztRQUMzQyxNQUFNLFVBQVUsR0FBRywwQkFBYyxDQUFDLDJCQUEyQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFOUUsT0FBTyxDQUFDLFVBQVUsR0FBRyxJQUFJLHlCQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFakQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBRWxDLDBCQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFL0IsSUFBSTtZQUNBLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakQ7UUFDRCxPQUFPLEdBQUcsRUFBRTtZQUNSLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLDJCQUEyQixFQUFFO1lBQ3RDLEtBQUssTUFBTSxRQUFRLElBQUksT0FBTyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixFQUFFO2dCQUNwRSxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksNEJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxDQUFDLGlCQUFpQixDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNwRTtTQUNKO1FBRUQsSUFBSSxPQUFPLENBQUMsU0FBUztZQUNqQixNQUFNLE9BQU8sQ0FBQztRQUVsQixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDLENBQUM7QUFDTixDQUFDO0FBL0JELG1DQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUZXN0Q29udHJvbGxlciBmcm9tICcuL3Rlc3QtY29udHJvbGxlcic7XG5pbXBvcnQgdGVzdFJ1blRyYWNrZXIgZnJvbSAnLi90ZXN0LXJ1bi10cmFja2VyJztcbmltcG9ydCB7IFRlc3RSdW4gfSBmcm9tICcuL3Rlc3QtcnVuLXRyYWNrZXIuZCc7XG5pbXBvcnQgVGVzdENhZmVFcnJvckxpc3QgZnJvbSAnLi4vZXJyb3JzL2Vycm9yLWxpc3QnO1xuaW1wb3J0IHsgTWlzc2luZ0F3YWl0RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMvdGVzdC1ydW4nO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3cmFwVGVzdEZ1bmN0aW9uIChmbjogRnVuY3Rpb24pOiBGdW5jdGlvbiB7XG4gICAgcmV0dXJuIGFzeW5jICh0ZXN0UnVuOiBUZXN0UnVuKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgICAgICAgPSBudWxsO1xuICAgICAgICBjb25zdCBlcnJMaXN0ICAgID0gbmV3IFRlc3RDYWZlRXJyb3JMaXN0KCk7XG4gICAgICAgIGNvbnN0IG1hcmtlcmVkZm4gPSB0ZXN0UnVuVHJhY2tlci5hZGRUcmFja2luZ01hcmtlclRvRnVuY3Rpb24odGVzdFJ1bi5pZCwgZm4pO1xuXG4gICAgICAgIHRlc3RSdW4uY29udHJvbGxlciA9IG5ldyBUZXN0Q29udHJvbGxlcih0ZXN0UnVuKTtcblxuICAgICAgICB0ZXN0UnVuLm9ic2VydmVkQ2FsbHNpdGVzLmNsZWFyKCk7XG5cbiAgICAgICAgdGVzdFJ1blRyYWNrZXIuZW5zdXJlRW5hYmxlZCgpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQgPSBhd2FpdCBtYXJrZXJlZGZuKHRlc3RSdW4uY29udHJvbGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgZXJyTGlzdC5hZGRFcnJvcihlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFlcnJMaXN0Lmhhc1VuY2F1Z2h0RXJyb3JzSW5UZXN0Q29kZSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBjYWxsc2l0ZSBvZiB0ZXN0UnVuLm9ic2VydmVkQ2FsbHNpdGVzLmNhbGxzaXRlc1dpdGhvdXRBd2FpdCkge1xuICAgICAgICAgICAgICAgIGVyckxpc3QuYWRkRXJyb3IobmV3IE1pc3NpbmdBd2FpdEVycm9yKGNhbGxzaXRlKSk7XG4gICAgICAgICAgICAgICAgdGVzdFJ1bi5vYnNlcnZlZENhbGxzaXRlcy5jYWxsc2l0ZXNXaXRob3V0QXdhaXQuZGVsZXRlKGNhbGxzaXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJMaXN0Lmhhc0Vycm9ycylcbiAgICAgICAgICAgIHRocm93IGVyckxpc3Q7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuIl19